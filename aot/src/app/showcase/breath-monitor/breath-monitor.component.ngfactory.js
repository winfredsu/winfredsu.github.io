"use strict";
/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
Object.defineProperty(exports, "__esModule", { value: true });
var i0 = require("@angular/core");
var i1 = require("../../../../../src/app/showcase/breath-monitor/breath-monitor.component");
var styles_BreathMonitorComponent = [];
exports.RenderType_BreathMonitorComponent = i0.ɵcrt({ encapsulation: 2,
    styles: styles_BreathMonitorComponent, data: {} });
function View_BreathMonitorComponent_0(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 35, 'div', [['class',
                'content-sm container plain-content']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n	'])), (_l()(),
            i0.ɵeld(0, null, null, 32, 'div', [['class', 'row']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n		'])), (_l()(), i0.ɵeld(0, null, null, 29, 'div', [['class',
                'col-lg-10 col-lg-offset-1']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n			'])), (_l()(), i0.ɵeld(0, null, null, 3, 'h1', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['Breath Monitor'])),
        (_l()(), i0.ɵeld(0, null, null, 1, 'span', [['class', 'text-uppercase margin-l-40 visible-lg-inline']], null, null, null, null, null)),
        (_l()(), i0.ɵted(null, ['Smart Healthcare'])), (_l()(), i0.ɵted(null, ['\n			'])), (_l()(), i0.ɵeld(0, null, null, 4, 'div', [['class',
                'well']], null, null, null, null, null)),
        (_l()(), i0.ɵted(null, ['\n				'])), (_l()(), i0.ɵeld(0, null, null, 1, 'em', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n				Respiration rate (rate of breathing) is a primary vital sign that indicates human body\'s functions. Meanwhile, breathing generates distance movement, which can be collected as energy. Can we monitor breathing condition using breathing energy?\n				'])),
        (_l()(), i0.ɵted(null, ['\n			'])), (_l()(), i0.ɵted(null, ['\n			'])),
        (_l()(), i0.ɵeld(0, null, null, 3, 'div', [['class', 'embed-responsive embed-responsive-16by9 margin-b-30']], null, null, null, null, null)),
        (_l()(), i0.ɵted(null, ['\n    			'])), (_l()(), i0.ɵeld(0, null, null, 0, 'iframe', [['class', 'embed-responsive-item'], ['src', 'https://www.youtube.com/embed/jK77uDYnLV4']], null, null, null, null, null)),
        (_l()(), i0.ɵted(null, ['\n			'])), (_l()(), i0.ɵted(null, ['\n			'])),
        (_l()(), i0.ɵeld(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['Breathing generates distance movement, which can be collected as energy. These energy can be utilized to measure the frequency of breathing, and even heart-rate and pulse oximeter. There\'s a wide range of applications such as wearable devices for babies, pregnants and fitness people. '])),
        (_l()(), i0.ɵted(null, ['\n			'])), (_l()(), i0.ɵeld(0, null, null, 4, 'p', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['However, one of the most challenging thing about monitoring breathing with breathing power is that '])),
        (_l()(), i0.ɵeld(0, null, null, 1, 'strong', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['the power is neither stable nor continuous'])), (_l()(), i0.ɵted(null, ['. Using conventional microprocessors in such systems will lead to an unfortunate dilemma: the frequent power outage will destroy all intermediate data in the processor, while storing all those data into Flash memory is both energy and time consuming. '])),
        (_l()(), i0.ɵted(null, [' \n			'])), (_l()(), i0.ɵeld(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['Fortunately, nonvolatile processor makes it possible to survive a power failure at negligible time and energy cost. This demo video shows a self-powered breath monitoring system consisting of a breath energy harvester (from Tahzib Safwat @ Penn State University), a nonvolatile processor and a LCD screen. The screen shows pulsed data including averaged breathing frequency and last time breath frequency. The higher 2 bits of LCD screen stand for average breathing frequency calculated through past 3 times breathing intervals. The lower 2 bits stand for the last time breathing frequency. An "L" indicates your breathing is too slow (<12 times/min), and an "H" indicates too high breathing frequency (>48 times/min).'])),
        (_l()(), i0.ɵted(null, ['\n		'])), (_l()(), i0.ɵted(null, ['\n	'])),
        (_l()(), i0.ɵted(null, ['\n'])), (_l()(), i0.ɵted(null, ['\n']))], null, null);
}
exports.View_BreathMonitorComponent_0 = View_BreathMonitorComponent_0;
function View_BreathMonitorComponent_Host_0(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 1, 'nvlabs-breath-monitor', [], null, null, null, View_BreathMonitorComponent_0, exports.RenderType_BreathMonitorComponent)), i0.ɵdid(49152, null, 0, i1.BreathMonitorComponent, [], null, null)], null, null);
}
exports.View_BreathMonitorComponent_Host_0 = View_BreathMonitorComponent_Host_0;
exports.BreathMonitorComponentNgFactory = i0.ɵccf('nvlabs-breath-monitor', i1.BreathMonitorComponent, View_BreathMonitorComponent_Host_0, {}, {}, []);
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiQzovVXNlcnMvc3VmYW5nL09uZURyaXZlL05WTGFicy9zcmMvYXBwL3Nob3djYXNlL2JyZWF0aC1tb25pdG9yL2JyZWF0aC1tb25pdG9yLmNvbXBvbmVudC5uZ2ZhY3RvcnkudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9DOi9Vc2Vycy9zdWZhbmcvT25lRHJpdmUvTlZMYWJzL3NyYy9hcHAvc2hvd2Nhc2UvYnJlYXRoLW1vbml0b3IvYnJlYXRoLW1vbml0b3IuY29tcG9uZW50LnRzIiwibmc6Ly8vQzovVXNlcnMvc3VmYW5nL09uZURyaXZlL05WTGFicy9zcmMvYXBwL3Nob3djYXNlL2JyZWF0aC1tb25pdG9yL2JyZWF0aC1tb25pdG9yLmNvbXBvbmVudC5odG1sIiwibmc6Ly8vQzovVXNlcnMvc3VmYW5nL09uZURyaXZlL05WTGFicy9zcmMvYXBwL3Nob3djYXNlL2JyZWF0aC1tb25pdG9yL2JyZWF0aC1tb25pdG9yLmNvbXBvbmVudC50cy5CcmVhdGhNb25pdG9yQ29tcG9uZW50X0hvc3QuaHRtbCJdLCJzb3VyY2VzQ29udGVudCI6WyIgIiwiPGRpdiBjbGFzcz1cImNvbnRlbnQtc20gY29udGFpbmVyIHBsYWluLWNvbnRlbnRcIj5cclxuXHQ8ZGl2IGNsYXNzPVwicm93XCI+XHJcblx0XHQ8ZGl2IGNsYXNzPVwiY29sLWxnLTEwIGNvbC1sZy1vZmZzZXQtMVwiPlxyXG5cdFx0XHQ8aDE+QnJlYXRoIE1vbml0b3I8c3BhbiBjbGFzcz1cInRleHQtdXBwZXJjYXNlIG1hcmdpbi1sLTQwIHZpc2libGUtbGctaW5saW5lXCI+U21hcnQgSGVhbHRoY2FyZTwvc3Bhbj48L2gxPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwid2VsbFwiPlxyXG5cdFx0XHRcdDxlbT5cclxuXHRcdFx0XHRSZXNwaXJhdGlvbiByYXRlIChyYXRlIG9mIGJyZWF0aGluZykgaXMgYSBwcmltYXJ5IHZpdGFsIHNpZ24gdGhhdCBpbmRpY2F0ZXMgaHVtYW4gYm9keSdzIGZ1bmN0aW9ucy4gTWVhbndoaWxlLCBicmVhdGhpbmcgZ2VuZXJhdGVzIGRpc3RhbmNlIG1vdmVtZW50LCB3aGljaCBjYW4gYmUgY29sbGVjdGVkIGFzIGVuZXJneS4gQ2FuIHdlIG1vbml0b3IgYnJlYXRoaW5nIGNvbmRpdGlvbiB1c2luZyBicmVhdGhpbmcgZW5lcmd5P1xyXG5cdFx0XHRcdDwvZW0+XHJcblx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZW1iZWQtcmVzcG9uc2l2ZSBlbWJlZC1yZXNwb25zaXZlLTE2Ynk5IG1hcmdpbi1iLTMwXCI+XHJcbiAgICBcdFx0XHQ8aWZyYW1lIGNsYXNzPVwiZW1iZWQtcmVzcG9uc2l2ZS1pdGVtXCIgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvaks3N3VEWW5MVjRcIj48L2lmcmFtZT5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHRcdDxwPkJyZWF0aGluZyBnZW5lcmF0ZXMgZGlzdGFuY2UgbW92ZW1lbnQsIHdoaWNoIGNhbiBiZSBjb2xsZWN0ZWQgYXMgZW5lcmd5LiBUaGVzZSBlbmVyZ3kgY2FuIGJlIHV0aWxpemVkIHRvIG1lYXN1cmUgdGhlIGZyZXF1ZW5jeSBvZiBicmVhdGhpbmcsIGFuZCBldmVuIGhlYXJ0LXJhdGUgYW5kIHB1bHNlIG94aW1ldGVyLiBUaGVyZSdzIGEgd2lkZSByYW5nZSBvZiBhcHBsaWNhdGlvbnMgc3VjaCBhcyB3ZWFyYWJsZSBkZXZpY2VzIGZvciBiYWJpZXMsIHByZWduYW50cyBhbmQgZml0bmVzcyBwZW9wbGUuIDwvcD5cclxuXHRcdFx0PHA+SG93ZXZlciwgb25lIG9mIHRoZSBtb3N0IGNoYWxsZW5naW5nIHRoaW5nIGFib3V0IG1vbml0b3JpbmcgYnJlYXRoaW5nIHdpdGggYnJlYXRoaW5nIHBvd2VyIGlzIHRoYXQgPHN0cm9uZz50aGUgcG93ZXIgaXMgbmVpdGhlciBzdGFibGUgbm9yIGNvbnRpbnVvdXM8L3N0cm9uZz4uIFVzaW5nIGNvbnZlbnRpb25hbCBtaWNyb3Byb2Nlc3NvcnMgaW4gc3VjaCBzeXN0ZW1zIHdpbGwgbGVhZCB0byBhbiB1bmZvcnR1bmF0ZSBkaWxlbW1hOiB0aGUgZnJlcXVlbnQgcG93ZXIgb3V0YWdlIHdpbGwgZGVzdHJveSBhbGwgaW50ZXJtZWRpYXRlIGRhdGEgaW4gdGhlIHByb2Nlc3Nvciwgd2hpbGUgc3RvcmluZyBhbGwgdGhvc2UgZGF0YSBpbnRvIEZsYXNoIG1lbW9yeSBpcyBib3RoIGVuZXJneSBhbmQgdGltZSBjb25zdW1pbmcuIDwvcD4gXHJcblx0XHRcdDxwPkZvcnR1bmF0ZWx5LCBub252b2xhdGlsZSBwcm9jZXNzb3IgbWFrZXMgaXQgcG9zc2libGUgdG8gc3Vydml2ZSBhIHBvd2VyIGZhaWx1cmUgYXQgbmVnbGlnaWJsZSB0aW1lIGFuZCBlbmVyZ3kgY29zdC4gVGhpcyBkZW1vIHZpZGVvIHNob3dzIGEgc2VsZi1wb3dlcmVkIGJyZWF0aCBtb25pdG9yaW5nIHN5c3RlbSBjb25zaXN0aW5nIG9mIGEgYnJlYXRoIGVuZXJneSBoYXJ2ZXN0ZXIgKGZyb20gVGFoemliIFNhZndhdCBAIFBlbm4gU3RhdGUgVW5pdmVyc2l0eSksIGEgbm9udm9sYXRpbGUgcHJvY2Vzc29yIGFuZCBhIExDRCBzY3JlZW4uIFRoZSBzY3JlZW4gc2hvd3MgcHVsc2VkIGRhdGEgaW5jbHVkaW5nIGF2ZXJhZ2VkIGJyZWF0aGluZyBmcmVxdWVuY3kgYW5kIGxhc3QgdGltZSBicmVhdGggZnJlcXVlbmN5LiBUaGUgaGlnaGVyIDIgYml0cyBvZiBMQ0Qgc2NyZWVuIHN0YW5kIGZvciBhdmVyYWdlIGJyZWF0aGluZyBmcmVxdWVuY3kgY2FsY3VsYXRlZCB0aHJvdWdoIHBhc3QgMyB0aW1lcyBicmVhdGhpbmcgaW50ZXJ2YWxzLiBUaGUgbG93ZXIgMiBiaXRzIHN0YW5kIGZvciB0aGUgbGFzdCB0aW1lIGJyZWF0aGluZyBmcmVxdWVuY3kuIEFuIFwiTFwiIGluZGljYXRlcyB5b3VyIGJyZWF0aGluZyBpcyB0b28gc2xvdyAoJiM2MDsxMiB0aW1lcy9taW4pLCBhbmQgYW4gXCJIXCIgaW5kaWNhdGVzIHRvbyBoaWdoIGJyZWF0aGluZyBmcmVxdWVuY3kgKCYjNjI7NDggdGltZXMvbWluKS48L3A+XHJcblx0XHQ8L2Rpdj5cclxuXHQ8L2Rpdj5cclxuPC9kaXY+XHJcbiIsIjxudmxhYnMtYnJlYXRoLW1vbml0b3I+PC9udmxhYnMtYnJlYXRoLW1vbml0b3I+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7b0JDQUE7TUFBQTtNQUFBLDhCQUFnRCx3Q0FDL0M7YUFBQTtVQUFBLDBEQUFpQjtNQUFBLFdBQ2hCO01BQUE7TUFBQSxnQkFBdUMsMENBQ3RDO01BQUE7TUFBQSw0Q0FBSTtNQUFjO1VBQUE7TUFBMkQscURBQTRCO1VBQUEsWUFDekc7VUFBQTtNQUFrQiwyQ0FDakI7VUFBQTtVQUFBLGdCQUFJO01BRUMsMENBQ0E7TUFDTjtVQUFBO01BQWlFLDhDQUM3RDtVQUFBO1VBQUE7TUFBK0YsMENBQzdGO01BQ047VUFBQSwwREFBRztVQUFBO01BQWlTLDBDQUNwUztVQUFBO1VBQUEsZ0JBQUc7TUFBbUc7VUFBQSwwREFBUTtVQUFBLGlEQUFtRDtVQUFBO01BQStQLDJDQUNoYTtVQUFBO1VBQUEsZ0JBQUc7TUFBMHRCLHlDQUN4dEI7TUFDRCx1Q0FDRDs7OztvQkNqQk47TUFBQTt1Q0FBQSxVQUFBO01BQUE7OzsifQ==
//# sourceMappingURL=breath-monitor.component.ngfactory.js.map